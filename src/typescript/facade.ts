import { Pipeline, Pipe, RuntimePipeline } from './core/pipeline.js';\nimport { jumpNow, jumpAfter } from './core/jumps.js';\nimport { shortCircuit } from './core/short_circuit.js';\nimport { LoggingMetrics, NoopMetrics, Metrics, LogLevel } from './core/metrics.js';\nimport { ignoreErrors, withFallback } from './core/steps.js';\nimport { PipelineRegistry } from './core/registry.js';\nimport { PipelineJsonLoader, LoaderOptions } from './config/json_loader.js';\nimport { httpStep, RemoteSpec, RemoteSpecInit } from './remote/http_step.js';\nimport { PromptBuilder } from './prompt/prompt.js';\nimport { DisruptorEngine } from './disruptor/engine.js';\nimport * as TextSteps from './examples/text_steps.js';\nimport * as Finance from './examples/finance_steps.js';\nimport * as TypedPredicates from './examples/typed_predicates.js';\n\nexport interface PipelineServicesFacade {\n  pipeline<T>(name: string, options?: { shortCircuit?: boolean; metrics?: Metrics }): Pipeline<T>;\n  pipe<I, O>(name: string, options?: { shortCircuit?: boolean; metrics?: Metrics }): Pipe<I, O>;\n  runtimePipeline<T>(name: string, options?: { shortCircuit?: boolean }): RuntimePipeline<T>;\n  jsonLoader(options?: LoaderOptions): PipelineJsonLoader;\n  loggingMetrics(level?: LogLevel, logger?: Console): LoggingMetrics;\n  noopMetrics(): NoopMetrics;\n  httpRemote(init: RemoteSpecInit): (inputValue: unknown) => Promise<unknown>;\n  remoteSpec(init: RemoteSpecInit): RemoteSpec;\n  promptBuilder<I, O>(): PromptBuilder<I, O>;\n  engine<T>(name: string, pipeline: (payload: T) => unknown | Promise<unknown>, capacity?: number): DisruptorEngine<T>;\n  registry<T>(): PipelineRegistry<T>;\n  steps: { ignoreErrors: typeof ignoreErrors; withFallback: typeof withFallback; };\n  jumps: { jumpNow: typeof jumpNow; jumpAfter: typeof jumpAfter; };\n  control: { shortCircuit: typeof shortCircuit; };\n  examples: { TextSteps: typeof TextSteps; Finance: typeof Finance; TypedPredicates: typeof TypedPredicates; };\n}\n\nexport const PipelineServices: PipelineServicesFacade = {\n  pipeline<T>(name: string, options?: { shortCircuit?: boolean; metrics?: Metrics }): Pipeline<T> {\n    const shortCircuit = options?.shortCircuit ?? true;\n    const metrics = options?.metrics ?? new NoopMetrics();\n    return new Pipeline<T>(name, shortCircuit, metrics);\n  },\n  pipe<I, O>(name: string, options?: { shortCircuit?: boolean; metrics?: Metrics }): Pipe<I, O> {\n    const shortCircuit = options?.shortCircuit ?? true;\n    const metrics = options?.metrics ?? new NoopMetrics();\n    return new Pipe<I, O>(name, shortCircuit, metrics);\n  },\n  runtimePipeline<T>(name: string, options?: { shortCircuit?: boolean }): RuntimePipeline<T> {\n    const shortCircuit = options?.shortCircuit ?? true;\n    return new RuntimePipeline<T>(name, shortCircuit);\n  },\n  jsonLoader(options?: LoaderOptions): PipelineJsonLoader {\n    return new PipelineJsonLoader(options);\n  },\n  loggingMetrics(level?: LogLevel, logger?: Console): LoggingMetrics {\n    return new LoggingMetrics(logger ?? console, level ?? 'info');\n  },\n  noopMetrics(): NoopMetrics {\n    return new NoopMetrics();\n  },\n  httpRemote(init: RemoteSpecInit): (inputValue: unknown) => Promise<unknown> {\n    return httpStep(new RemoteSpec(init));\n  },\n  remoteSpec(init: RemoteSpecInit): RemoteSpec {\n    return new RemoteSpec(init);\n  },\n  promptBuilder<I, O>(): PromptBuilder<I, O> {\n    return new PromptBuilder<I, O>();\n  },\n  engine<T>(name: string, pipeline: (payload: T) => unknown | Promise<unknown>, capacity?: number): DisruptorEngine<T> {\n    return new DisruptorEngine<T>(name, pipeline, capacity ?? 8192);\n  },\n  registry<T>(): PipelineRegistry<T> {\n    return new PipelineRegistry<T>();\n  },\n  steps: { ignoreErrors, withFallback },\n  jumps: { jumpNow, jumpAfter },\n  control: { shortCircuit },\n  examples: { TextSteps, Finance, TypedPredicates }\n};\n